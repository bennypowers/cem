/*
Copyright Â© 2025 Benny Powers <web@bennypowers.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

// Code generated by mcp/tools/gen-adapters; DO NOT EDIT.
// Generated at: 2025-09-11T21:29:57+03:00

package mcp

import (
	"encoding/json"
	M "bennypowers.dev/cem/manifest"
	"bennypowers.dev/cem/mcp/security"
)


// AttributeMcpAdapter implements the Attribute interface by embedding manifest.Attribute
type AttributeMcpAdapter struct {
	*M.Attribute
	guidelines []string
	examples   []string
}

func (a AttributeMcpAdapter) Kind() ItemKind {
	return KindAttribute
}

func (a AttributeMcpAdapter) Name() string {
	return a.Attribute.Name
}

func (a AttributeMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.Attribute.Description)
}

func (a AttributeMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a AttributeMcpAdapter) Examples() []string {
	return a.examples
}


func (a AttributeMcpAdapter) Type() string {
	return getTypeString(a.Attribute.Type)
}



func (a AttributeMcpAdapter) Default() string {
	return a.Attribute.Default
}



func (a AttributeMcpAdapter) Values() []string {
	return extractEnumValues(a.Attribute.Type)
}



func (a AttributeMcpAdapter) Required() bool {
	// This information is not available in the manifest structure
	return false
}










// MarshalJSON for AttributeMcpAdapter
func (a AttributeMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		Type:        stringPtr(a.Type()),
		Default:     stringPtr(a.Default()),
		Required:    boolPtr(a.Required()),
		Values:      a.Values(),
		
		
		
	}
	return json.Marshal(j)
}


// SlotMcpAdapter implements the Slot interface by embedding manifest.Slot
type SlotMcpAdapter struct {
	*M.Slot
	guidelines []string
	examples   []string
}

func (a SlotMcpAdapter) Kind() ItemKind {
	return KindSlot
}

func (a SlotMcpAdapter) Name() string {
	return a.Slot.Name
}

func (a SlotMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.Slot.Description)
}

func (a SlotMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a SlotMcpAdapter) Examples() []string {
	return a.examples
}
















func (a SlotMcpAdapter) isSlot() {}


// MarshalJSON for SlotMcpAdapter
func (a SlotMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		
		
		
		
		
		
		
	}
	return json.Marshal(j)
}


// EventMcpAdapter implements the Event interface by embedding manifest.Event
type EventMcpAdapter struct {
	*M.Event
	guidelines []string
	examples   []string
}

func (a EventMcpAdapter) Kind() ItemKind {
	return KindEvent
}

func (a EventMcpAdapter) Name() string {
	return a.Event.Name
}

func (a EventMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.Event.Description)
}

func (a EventMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a EventMcpAdapter) Examples() []string {
	return a.examples
}


func (a EventMcpAdapter) Type() string {
	return getTypeString(a.Event.Type)
}















func (a EventMcpAdapter) isEvent() {}


// MarshalJSON for EventMcpAdapter
func (a EventMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		Type:        stringPtr(a.Type()),
		
		
		
		
		
		
	}
	return json.Marshal(j)
}


// CssPropertyMcpAdapter implements the CssProperty interface by embedding manifest.CssCustomProperty
type CssPropertyMcpAdapter struct {
	*M.CssCustomProperty
	guidelines []string
	examples   []string
}

func (a CssPropertyMcpAdapter) Kind() ItemKind {
	return KindCssProperty
}

func (a CssPropertyMcpAdapter) Name() string {
	return a.CssCustomProperty.Name
}

func (a CssPropertyMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.CssCustomProperty.Description)
}

func (a CssPropertyMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a CssPropertyMcpAdapter) Examples() []string {
	return a.examples
}










func (a CssPropertyMcpAdapter) Syntax() string {
	return a.CssCustomProperty.Syntax
}



func (a CssPropertyMcpAdapter) Inherits() bool {
	// This information is not available in the manifest structure
	return false
}



func (a CssPropertyMcpAdapter) Initial() string {
	return a.CssCustomProperty.Default
}




// MarshalJSON for CssPropertyMcpAdapter
func (a CssPropertyMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		
		
		
		
		Syntax:      stringPtr(a.Syntax()),
		Inherits:    boolPtr(a.Inherits()),
		Initial:     stringPtr(a.Initial()),
	}
	return json.Marshal(j)
}


// CssPartMcpAdapter implements the CssPart interface by embedding manifest.CssPart
type CssPartMcpAdapter struct {
	*M.CssPart
	guidelines []string
	examples   []string
}

func (a CssPartMcpAdapter) Kind() ItemKind {
	return KindCssPart
}

func (a CssPartMcpAdapter) Name() string {
	return a.CssPart.Name
}

func (a CssPartMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.CssPart.Description)
}

func (a CssPartMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a CssPartMcpAdapter) Examples() []string {
	return a.examples
}
















func (a CssPartMcpAdapter) isCssPart() {}


// MarshalJSON for CssPartMcpAdapter
func (a CssPartMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		
		
		
		
		
		
		
	}
	return json.Marshal(j)
}


// CssStateMcpAdapter implements the CssState interface by embedding manifest.CssCustomState
type CssStateMcpAdapter struct {
	*M.CssCustomState
	guidelines []string
	examples   []string
}

func (a CssStateMcpAdapter) Kind() ItemKind {
	return KindCssState
}

func (a CssStateMcpAdapter) Name() string {
	return a.CssCustomState.Name
}

func (a CssStateMcpAdapter) Description() string {
	return security.SanitizeDescriptionPreservingMarkdown(a.CssCustomState.Description)
}

func (a CssStateMcpAdapter) Guidelines() []string {
	return a.guidelines
}

func (a CssStateMcpAdapter) Examples() []string {
	return a.examples
}
















func (a CssStateMcpAdapter) isCssState() {}


// MarshalJSON for CssStateMcpAdapter
func (a CssStateMcpAdapter) MarshalJSON() ([]byte, error) {
	j := itemJSON{
		Kind:        a.Kind(),
		Name:        a.Name(),
		Description: a.Description(),
		Guidelines:  a.Guidelines(),
		Examples:    a.Examples(),
		
		
		
		
		
		
		
	}
	return json.Marshal(j)
}



// Helper functions for pointer creation
func stringPtr(s string) *string {
	return &s
}

func boolPtr(b bool) *bool {
	return &b
}
