name: Release Go CLI and Publish to npm

on:
  release:
    types:
      - published

jobs:
  release:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            node_platform: linux
            node_arch: x64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            node_platform: linux
            node_arch: arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            cc: x86_64-w64-mingw32-gcc
            node_platform: win32
            node_arch: x64
            runner: ubuntu-latest
          - goos: windows
            goarch: arm64
            cc: aarch64-w64-mingw32-gcc
            node_platform: win32
            node_arch: arm64
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            cc: clang
            node_platform: darwin
            node_arch: x64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            cc: clang
            node_platform: darwin
            node_arch: arm64
            runner: macos-latest
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
        env:
          GOTOOLCHAIN: auto

      - name: Install cross-compilers for CGO (Linux/Windows only) with retry
        if: runner.os == 'Linux'
        run: |
          for i in {1..5}; do
            sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 mingw-w64 && break || sleep 10
          done

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: ${{ !(matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        with:
          version: "~> v2"
          args: build --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CC: ${{ matrix.cc }}

      - name: Build with special toolchain for windows/arm
        if: ${{ (matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        run: |
          make windows-arm64
          mkdir -p dist/windows-arm64
          cp dist/*.exe dist/windows-arm64/cem.exe
        env:
          CGO_CFLAGS: -Wno-dll-attribute-on-redeclaration

      - name: Prepare npm platform package
        run: |
          mkdir -p platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          cp dist/*/cem* platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/
          node scripts/gen-platform-package-jsons.js
          cp README.md platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/README.md

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Git identity
        run: |
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"
          git config set advice.addIgnoredFile false

      - name: Prepare npm version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -o pipefail
          cd platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          echo "!package.json" >> .gitignore
          echo "" > .npmignore
          npm version from-git --no-git-tag-version
          git add package.json

      - name: Publish platform package to npm (capture output)
        id: npm_publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          npm_output=$(mktemp)
          npm publish --access public > "$npm_output" 2>&1 || true
          cat "$npm_output"
          echo "output<<EOF" >> $GITHUB_OUTPUT
          cat "$npm_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse npm publish output and set job status
        run: |
          echo '${{ steps.npm_publish.outputs.output }}'
          if echo '${{ steps.npm_publish.outputs.output }}' | grep -qE 'You cannot publish over the previously published versions'; then
            echo "::warning::NPM package was already published"
            exit 0
          elif echo '${{ steps.npm_publish.outputs.output }}' | grep -q 'npm ERR!'; then
            echo "::error::NPM publish failed (not due to already published). See log above."
            exit 1
          fi

      - name: Get Release Upload URL
        if: always()
        id: get_path
        run: echo "asset_path=$(ls dist/**/cem*)" >> $GITHUB_OUTPUT

      - name: Upload all binaries to GitHub Release
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.get_path.outputs.asset_path }}
          asset_name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  npm:
    name: Package and publish npm
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'

      - name: Prepare npm package
        run: |
          echo "Copying README"
          cp README.md npm/README.md
          echo "Setting up Git ID"
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"

      - name: Version npm package
        run: |
          npm version from-git --no-git-tag-version
          node ../scripts/update-platform-package-versions.js
        working-directory: ./npm

      - name: Publish to npm
        id: npm_publish
        run: |
          cd npm
          npm_output=$(mktemp)
          npm publish --access public > "$npm_output" 2>&1 || true
          cat "$npm_output"
          echo "output<<EOF" >> $GITHUB_OUTPUT
          cat "$npm_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Parse npm publish output and set job status
        run: |
          echo '${{ steps.npm_publish.outputs.output }}'
          if echo '${{ steps.npm_publish.outputs.output }}' | grep -qE 'You cannot publish over the previously published versions'; then
            echo "::warning::NPM package was already published"
            exit 0
          elif echo '${{ steps.npm_publish.outputs.output }}' | grep -q 'npm ERR!'; then
            echo "::error::NPM publish failed (not due to already published). See log above."
            exit 1
          fi

        working-directory: ./npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  vscode-extension:
    name: Build and publish VSCode extension
    runs-on: ubuntu-latest
    needs: npm  # Wait for npm packages to be published
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: extensions/vscode/.nvmrc
          cache: npm
          cache-dependency-path: extensions/vscode/package-lock.json

      - name: Install dependencies
        working-directory: extensions/vscode
        run: npm ci

      - name: Download release binaries
        run: |
          mkdir -p extensions/vscode/dist/bin
          
          # Download all platform binaries from the GitHub release
          gh release download ${{ github.event.release.tag_name }} \
            --pattern "cem-linux-amd64" \
            --pattern "cem-linux-arm64" \
            --pattern "cem-darwin-amd64" \
            --pattern "cem-darwin-arm64" \
            --pattern "cem-windows-amd64" \
            --pattern "cem-windows-arm64" \
            --dir temp-binaries
          
          # Rename to match VSCode extension naming convention
          mv temp-binaries/cem-linux-amd64 extensions/vscode/dist/bin/cem-x86_64-unknown-linux-gnu
          mv temp-binaries/cem-linux-arm64 extensions/vscode/dist/bin/cem-aarch64-unknown-linux-gnu
          mv temp-binaries/cem-darwin-amd64 extensions/vscode/dist/bin/cem-x86_64-apple-darwin
          mv temp-binaries/cem-darwin-arm64 extensions/vscode/dist/bin/cem-aarch64-apple-darwin
          mv temp-binaries/cem-windows-amd64 extensions/vscode/dist/bin/cem-x86_64-pc-windows-msvc.exe
          mv temp-binaries/cem-windows-arm64 extensions/vscode/dist/bin/cem-aarch64-pc-windows-msvc.exe
          
          chmod +x extensions/vscode/dist/bin/cem-*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version from release tag
        working-directory: extensions/vscode
        run: |
          # Extract version from release tag (e.g., v1.0.0 -> 1.0.0)
          VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
          npm version $VERSION --no-git-tag-version

      - name: Build extension
        working-directory: extensions/vscode
        run: npm run build

      - name: Publish to VS Code Marketplace
        working-directory: extensions/vscode
        run: npm run publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Find VSIX file
        id: find_vsix
        working-directory: extensions/vscode
        run: |
          # Find the generated VSIX file (vsce package creates it in current directory)
          VSIX_FILE=$(ls *.vsix | head -1)
          echo "vsix_file=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "Found VSIX file: $VSIX_FILE"

      - name: Upload VSIX to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: extensions/vscode/${{ steps.find_vsix.outputs.vsix_file }}
          asset_name: cem-vscode-${{ github.event.release.tag_name }}.vsix
          asset_content_type: application/zip

  zed-extension:
    name: Build and publish Zed extension
    runs-on: ubuntu-latest
    needs: npm  # Wait for npm packages to be published
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Release to Zed extensions
        uses: huacnlee/zed-extension-action@v1
        with:
          extension-name: cem
          extension-path: extensions/zed
          push-to: bennypowers/zed-extensions
        env:
          COMMITTER_TOKEN: ${{ secrets.ZED_COMMITTER_TOKEN }}
