name: Release Go CLI and Publish to npm

on:
  release:
    types:
      - published

jobs:
  release:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            runner: ubuntu-latest
          # FIXME: if anyone needs this
          # - goos: windows
          #   goarch: amd64
          #   cc: x86_64-w64-mingw32-gcc
          #   runner: ubuntu-latest
          # - goos: windows
          #   goarch: arm64
          #   cc: aarch64-w64-mingw32-gcc
          #   runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            cc: clang
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            cc: clang
            runner: macos-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Install cross-compilers for CGO (Linux/Windows only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 mingw-w64

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: "~> v2"
          args: build --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CC: ${{ matrix.cc }}

      - name: Upload Go binaries for npm
        uses: actions/upload-artifact@v4
        with:
          name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/cem*

      - name: Get Release Upload URL
        id: get_release
        run: |
          set -e
          ls dist/**/*
          TAG_NAME="${GITHUB_REF##*/}"
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}"
          RELEASE_DATA=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r .upload_url)
          BIN_PATH=$(ls dist/**/cem)
          echo "asset_path=$BIN_PATH" >> $GITHUB_OUTPUT
          if [ "$UPLOAD_URL" = "null" ]; then
            echo "No release found for tag $TAG_NAME."
            echo "release_found=false" >> $GITHUB_OUTPUT
          else
            echo "release_found=true" >> $GITHUB_OUTPUT
            echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          fi

      - name: Upload all binaries to GitHub Release
        if: steps.get_release.outputs.release_found == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.get_release.outputs.asset_path }}
          asset_name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  npm:
    # come back to this down the line
    #
    # there aren't great options for multi-arch packages.
    # we'll probably adopt esbuild's approach, shipping one package per arch/os combo
    # and listing them as optionalDependencies in the main package
    if: false
    name: Package and publish npm
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Download all binaries from matrix jobs
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare npm package
        run: |
          echo "Preparing npm package"
          mkdir -p npm/bin
          cp -r dist/* npm/bin

      - name: Set up Git user identity
        run: |
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"

      - name: Version npm package
        run: npm version from-git
        working-directory: ./npm

      - name: Publish to npm
        run: npm publish --access public
        working-directory: ./npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
