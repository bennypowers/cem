name: Release Go CLI and Publish to npm

on:
  release:
    types:
      - published

jobs:
  release:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            node_platform: linux
            node_arch: x64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            node_platform: linux
            node_arch: arm64
            runner: ubuntu-latest
          # FIXME: if you need this, fix the build
          # - goos: windows
          #   goarch: amd64
          #   cc: x86_64-w64-mingw32-gcc
          #   node_platform: win32
          #   node_arch: x64
          #   runner: ubuntu-latest
          # - goos: windows
          #   goarch: arm64
          #   cc: aarch64-w64-mingw32-gcc
          #   node_platform: win32
          #   node_arch: arm64
          #   runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            cc: clang
            node_platform: darwin
            node_arch: x64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            cc: clang
            node_platform: darwin
            node_arch: arm64
            runner: macos-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Install cross-compilers for CGO (Linux/Windows only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 mingw-w64

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: "~> v2"
          args: build --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CC: ${{ matrix.cc }}

      - name: Prepare npm platform package
        run: |
          mkdir -p platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          cp dist/*/cem platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/
          node scripts/gen-platform-package-jsons.js
          cp README.md platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/README.md

      - name: Set up Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish platform package to npm
        run: |
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"
          git config set advice.addIgnoredFile false
          echo "" > .npmignore
          cd platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          npm version from-git
          git add package.json
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload Go binaries for npm
        uses: actions/upload-artifact@v4
        with:
          name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/cem*

      - name: Get Release Upload URL
        id: get_path
        run: echo "asset_path=$(ls dist/**/cem*)" >> $GITHUB_OUTPUT

      - name: Upload all binaries to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.get_path.outputs.asset_path }}
          asset_name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  npm:
    name: Package and publish npm
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Prepare npm package
        run: |
          echo "Copying README"
          cp README.md npm/README.md
          echo "Setting up Git ID"
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"

      - name: Version npm package
        run: npm version from-git
        working-directory: ./npm

      - name: Publish to npm
        run: npm publish --access public
        working-directory: ./npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
