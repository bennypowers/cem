name: Release Go CLI and Publish to npm

on:
  release:
    types:
      - published

jobs:
  release:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            node_platform: linux
            node_arch: x64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            node_platform: linux
            node_arch: arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            cc: x86_64-w64-mingw32-gcc
            node_platform: win32
            node_arch: x64
            runner: ubuntu-latest
          - goos: windows
            goarch: arm64
            cc: aarch64-w64-mingw32-gcc
            node_platform: win32
            node_arch: arm64
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            cc: clang
            node_platform: darwin
            node_arch: x64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            cc: clang
            node_platform: darwin
            node_arch: arm64
            runner: macos-latest
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Install cross-compilers for CGO (Linux/Windows only) with retry
        if: runner.os == 'Linux'
        run: |
          for i in {1..5}; do
            sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 mingw-w64 && break || sleep 10
          done

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: ${{ !(matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        with:
          version: "~> v2"
          args: build --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CC: ${{ matrix.cc }}

      - name: Fake windows / arm build
        if: ${{ (matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        run: make windows-arm64

      - name: Prepare npm platform package
        run: |
          mkdir -p platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          cp dist/*/cem* platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/
          node scripts/gen-platform-package-jsons.js
          cp README.md platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/README.md

      - name: Set up Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish platform package to npm with JSON output and robust E403 handling
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"
          git config set advice.addIgnoredFile false
          echo "!package.json" >> .gitignore
          echo "" > .npmignore
          npm version from-git --no-git-tag-version
          git add package.json
          set -o pipefail
          npm_output=$(mktemp)
          npm publish --access public --json > "$npm_output" 2>&1
          status=$?
          result=$(cat "$npm_output")
          cat "$npm_output" | jq
          if echo "$result" | grep -qE '"code": ?"E403"|"You cannot publish over the previously published versions"'; then
            echo "::warning::NPM package was already published or forbidden (E403)"
            exit 0
          elif [ $status -ne 0 ]; then
            echo "::error::NPM publish failed (not due to already published). See JSON log above."
            echo "$result"
            exit 1
          fi

      - name: Get Release Upload URL
        if: always()
        id: get_path
        run: echo "asset_path=$(ls dist/**/cem*)" >> $GITHUB_OUTPUT

      - name: Upload all binaries to GitHub Release
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.get_path.outputs.asset_path }}
          asset_name: cem-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream

  npm:
    name: Package and publish npm
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Prepare npm package
        run: |
          echo "Copying README"
          cp README.md npm/README.md
          echo "Setting up Git ID"
          git config --global user.email "web@bennypowers.com"
          git config --global user.name "Benny Powers"

      - name: Install Node dependencies (with retry)
        run: |
          for i in {1..5}; do
            npm ci && break || sleep 10
          done
        working-directory: ./npm

      - name: Version npm package
        run: |
          npm version from-git --no-git-tag-version
          node ../scripts/update-platform-package-versions.js
        working-directory: ./npm

      - name: Publish to npm with warning on already published
        run: |
          set -o pipefail
          npm_output=$(mktemp)
          npm publish --access public --json > "$npm_output" 2>&1
          status=$?
          result=$(cat "$npm_output")
          cat "$npm_output" | jq
          if echo "$result" | grep -qE '"code": ?"E403"|"You cannot publish over the previously published versions"'; then
            echo "::warning::NPM package was already published or forbidden (E403)"
            exit 0
          elif [ $status -ne 0 ]; then
            echo "::error::NPM publish failed (not due to already published). See JSON log above."
            echo "$result"
            exit 1
          fi
        working-directory: ./npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
