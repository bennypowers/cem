name: Test Build (No Release)

on: push

jobs:
  test-build:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            node_platform: linux
            node_arch: x64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            node_platform: linux
            node_arch: arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            cc: x86_64-w64-mingw32-gcc
            node_platform: win32
            node_arch: x64
            runner: ubuntu-latest
          - goos: windows
            goarch: arm64
            cc: aarch64-w64-mingw32-gcc
            node_platform: win32
            node_arch: arm64
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            cc: clang
            node_platform: darwin
            node_arch: x64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            cc: clang
            node_platform: darwin
            node_arch: arm64
            runner: macos-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Install cross-compilers for CGO (Linux/Windows only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 mingw-w64

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: ${{ !(matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        with:
          version: "~> v2"
          args: build --single-target --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CC: ${{ matrix.cc }}

      # We have a windows arm cross compiler image which does successfully output a binary
      # build it with "make windows"
      # If you need it, test it then open a PR to add it to the goreleaser/gh-actions build
      - name: Fake windows / arm build
        if: ${{ (matrix.goos == 'windows' && matrix.goarch == 'arm64') }}
        run: |
          echo "Note: windows-arm64 builds are not yet supported. Generating a stub script instead"
          echo '#!/usr/bin/env node\nconsole.error("cem does not yet support Windows on ARM64. Please use x64 or another operating system.");process.exit(1);' > cem.exe
          chmod +x cem.exe
          mkdir -p dist/cem-windows-arm64
          mv cem.exe dist/cem-windows-arm64/cem.exe

      - name: Install tree
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y tree
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install tree
          fi

      - name: Prepare npm platform package (dry run)
        run: |
          mkdir -p platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          mkdir -p dist
          cp dist/*/cem${{ matrix.goos == 'windows' && '.exe' || '' }} platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}/
          node scripts/gen-platform-package-jsons.js
          tree dist || true
          tree platforms || true

      - name: Set up Node.js for package validation
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Validate npm package (dry run)
        run: |
          cd platforms/cem-${{ matrix.node_platform }}-${{ matrix.node_arch }}
          npm pack --dry-run
          echo "âœ… Package validation successful for ${{ matrix.node_platform }}-${{ matrix.node_arch }}"
