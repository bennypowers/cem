[{"body":"For go binaries:\ngo install bennypowers.dev/cem@latest For NPM projects:\nnpm install --save-dev @pwrs/cem Or clone this repository and build from source:\ngit clone https://github.com/bennypowers/cem.git cd cem make Shell Completion cem supports shell completion for Bash, Zsh, Fish, and PowerShell. The completion scripts provide tab completion for commands, flags, and file paths.\nBash To load completions in your current shell session:\nsource \u0026lt;(cem completion bash) To load completions for every new session, execute once:\nLinux:\ncem completion bash \u0026gt; /etc/bash_completion.d/cem macOS:\ncem completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/cem Zsh To load completions in your current shell session:\nsource \u0026lt;(cem completion zsh) To load completions for every new session, execute once:\ncem completion zsh \u0026gt; \u0026#34;${fpath[1]}/_cem\u0026#34; You will need to start a new shell for this setup to take effect.\nFish To load completions in your current shell session:\ncem completion fish | source To load completions for every new session, execute once:\ncem completion fish \u0026gt; ~/.config/fish/completions/cem.fish PowerShell To load completions in your current shell session:\ncem completion powershell | Out-String | Invoke-Expression To load completions for every new session, add the output of the above command to your PowerShell profile.\n","link":"https://bennypowers.dev/cem/docs/installation/","section":"docs","title":"Installation"},{"body":"You can configure cem via a cem.yaml file in your project\u0026rsquo;s .config directory, or by using command-line flags.\nConfiguration File Here is a complete example of a .config/cem.yaml file with all available options explained.\n# The canonical public source control URL for your repository root. # Used for generating source links in the manifest. sourceControlRootUrl: \u0026#34;https://github.com/your/repo/tree/main/\u0026#34; # Configuration for the `generate` command. generate: # A list of glob patterns for files to include in the analysis. files: - \u0026#34;src/**/*.ts\u0026#34; # A list of glob patterns for files to exclude from the analysis. exclude: - \u0026#34;src/**/*.test.ts\u0026#34; # The path to write the final custom-elements.json manifest. # If omitted, the manifest is written to standard output. output: \u0026#34;custom-elements.json\u0026#34; # By default, certain files like TypeScript declaration files (`.d.ts`) are excluded. # Set to `true` to include all files matched by the `files` glob. noDefaultExcludes: false # Configuration for integrating Design Tokens. designTokens: # An npm specifier or local path to a DTCG-formatted JSON module. spec: \u0026#34;npm:@my-ds/tokens/tokens.json\u0026#34; # A CSS custom property prefix to apply to the design tokens. prefix: \u0026#34;--my-ds\u0026#34; # Configuration for discovering element demos. demoDiscovery: # A glob pattern to find demo files. fileGlob: \u0026#34;src/**/demos/*.html\u0026#34; # URLPattern for extracting parameters from demo file paths. # Uses standard URLPattern syntax with named parameters. urlPattern: \u0026#34;/src/:component/demos/:demo.html\u0026#34; # Go template to construct the canonical URL for a demo. # Uses {{.param}} syntax with optional template functions. # Available functions: alias, slug, lower, upper urlTemplate: \u0026#34;https://example.com/components/{{.component | alias}}/demo/{{.demo | slug}}/\u0026#34; # Configuration for validation warnings. warnings: disable: # Disable entire categories - \u0026#34;lifecycle\u0026#34; - \u0026#34;private\u0026#34; # Or disable specific warning rules - \u0026#34;lifecycle-lit-render\u0026#34; - \u0026#34;implementation-static-styles\u0026#34; Demo Discovery Features The demo discovery system supports multiple ways to control how demos are associated with elements and how their URLs are generated.\nHTML5 Microdata Demos can use HTML5 microdata to explicitly declare their URLs and associations:\n\u0026lt;!-- Explicit URL declaration --\u0026gt; \u0026lt;meta itemprop=\u0026#34;demo-url\u0026#34; content=\u0026#34;/elements/call-to-action/demo/\u0026#34;\u0026gt; \u0026lt;meta itemprop=\u0026#34;description\u0026#34; content=\u0026#34;Primary variant demonstration\u0026#34;\u0026gt; \u0026lt;!-- Rich markdown description --\u0026gt; \u0026lt;script type=\u0026#34;text/markdown\u0026#34; itemprop=\u0026#34;description\u0026#34;\u0026gt; # Call to Action Demo Showcases primary variant with styling, accessibility, and interaction states. \u0026lt;/script\u0026gt; \u0026lt;!-- Explicit element association --\u0026gt; \u0026lt;meta itemprop=\u0026#34;demo-for\u0026#34; content=\u0026#34;rh-button pf-button\u0026#34;\u0026gt; Association Priority The system uses the following priority order to associate demos with elements:\nExplicit microdata: \u0026lt;meta itemprop=\u0026quot;demo-for\u0026quot; content=\u0026quot;element-name\u0026quot;\u0026gt; Path-based: Elements whose aliases appear in demo file paths Content-based: Custom elements found in the demo HTML Path-Based Association with URLPattern When a urlPattern is configured, path-based association becomes parameter-position aware. Element aliases only match when they appear in path positions that correspond to URLPattern parameters.\nExample Configuration:\ndemoDiscovery: fileGlob: \u0026#34;shop/**/demos/*.html\u0026#34; urlPattern: \u0026#34;/shop/:element/:demo.html\u0026#34; urlTemplate: \u0026#34;https://mysite.com/shop/{{.element | alias}}/{{.demo}}/\u0026#34; Element Aliases:\naliases: my-shop-button: \u0026#34;shop-button\u0026#34; my-accordion: \u0026#34;accordion\u0026#34; my-accordion-header: \u0026#34;accordion-header\u0026#34; Path Matching Behavior:\n✅ /shop/shop-button/basic.html → matches my-shop-button (alias \u0026ldquo;shop-button\u0026rdquo; in :element position) ❌ /shop/my-shop-button/basic.html → no match (alias \u0026ldquo;shop-button\u0026rdquo; ≠ \u0026ldquo;my-shop-button\u0026rdquo;) ✅ /shop/accordion-header/demo.html → matches my-accordion-header only ❌ /shop/accordion-header/demo.html → does NOT match my-accordion (prevents false positives) This precision matching prevents issues where shorter aliases (like \u0026ldquo;accordion\u0026rdquo;) incorrectly match longer path segments (like \u0026ldquo;my-accordion-header\u0026rdquo;).\nLegacy Behavior (no URLPattern): When urlPattern is not configured, the system falls back to compatibility mode with improved substring matching that prioritizes longer, more specific aliases over shorter ones.\nDescription Sources Demo descriptions are extracted exclusively from microdata:\nMeta tags: \u0026lt;meta itemprop=\u0026quot;description\u0026quot; content=\u0026quot;Simple description\u0026quot;\u0026gt; Script tags: \u0026lt;script type=\u0026quot;text/markdown\u0026quot; itemprop=\u0026quot;description\u0026quot;\u0026gt;Rich **markdown** content\u0026lt;/script\u0026gt; URL Generation Priority URLs are generated using the following priority:\nExplicit microdata: \u0026lt;meta itemprop=\u0026quot;demo-url\u0026quot; content=\u0026quot;/path/to/demo/\u0026quot;\u0026gt; URLPattern fallback: Using urlPattern and urlTemplate configuration No URL: Demo is skipped if no pattern matches URL Template Functions The urlTemplate uses Go template syntax with a set of built-in functions for transforming URLPattern parameters:\nFunction Description Example alias Apply element alias mapping from configuration {{.tag | alias}} slug Convert to URL-friendly slug format {{.demo | slug}} lower Convert to lowercase {{.component | lower}} upper Convert to uppercase {{.section | upper}} Template Examples:\n# Basic parameter interpolation urlTemplate: \u0026#34;https://example.com/{{.component}}/{{.demo}}/\u0026#34; # Apply alias transformation urlTemplate: \u0026#34;https://example.com/{{.component | alias}}/{{.demo}}/\u0026#34; # Chain multiple functions urlTemplate: \u0026#34;https://example.com/{{.component | alias | slug}}/{{.demo | lower}}/\u0026#34; # Function call syntax (alternative) urlTemplate: \u0026#34;https://example.com/{{alias .component}}/{{slug .demo}}/\u0026#34; Important: All transformations must be explicitly specified. Unlike previous versions, no automatic aliasing or slugification is applied unless explicitly requested in the template.\nConfiguration Examples Minimal (microdata-driven):\ndemoDiscovery: fileGlob: elements/**/demo/*.html URLPattern with explicit configuration:\ndemoDiscovery: fileGlob: elements/**/demo/*.html urlPattern: \u0026#34;/elements/:element/demo/:demo.html\u0026#34; urlTemplate: \u0026#34;https://site.com/components/{{.element | alias}}/demo/{{.demo | slug}}/\u0026#34; Complex multi-site example:\ndemoDiscovery: fileGlob: src/components/**/demos/*.html urlPattern: \u0026#34;/src/components/:component/demos/:variant.html\u0026#34; urlTemplate: \u0026#34;https://{{.component | alias | lower}}.examples.com/{{.variant | slug}}/\u0026#34; Global Flags These flags can be used with any cem command.\nFlag Description --config Path to a custom config file. --package deno-style package specifier, or path to the local package directory. --verbose, -v Enable verbose logging output. --help, -h Show help for a command. Command-Line Flags All configuration options can also be set via command-line flags. Flags will always override any values set in the configuration file.\nFor example, to override the output and exclude options for the generate command:\ncem generate --output my-manifest.json --exclude \u0026#34;src/legacy/**\u0026#34; Validate Command Flags The validate command supports additional flags:\nFlag Description --disable Disable specific warning rules or categories (repeatable). --format Output format: text (default) or json. For example, to validate with disabled warnings and JSON output:\ncem validate --disable lifecycle --disable private --format json ","link":"https://bennypowers.dev/cem/docs/configuration/","section":"docs","title":"Configuration"},{"body":"Number of runs per tool: 100 Number of files analyzed per run: 45 Benchmark results: lower is better (seconds) : 1.45 @lit-labs/cli 1.45 : 0.81 @custom-elements-manifest/analyzer 0.81 : 0.25 cem generate 0.25 @lit-labs/cli Docs 1.45s Avg Time 52.3KB Avg Output Size 100 Runs Warnings Validation Command npx --yes @lit-labs/cli labs gen --manifest --out data/lit Run Breakdown: Time per Run (seconds) 1.42 1.44 1.45 1.47 1.48 1.50 1100Run # Validation Results 📄 Global schema schema-version-old: validation for manifests with schemaVersion \u003c 2.1.0 may not produce accurate results (version: 1.0.0) 📄 benchmark/components/alert-toast.js lifecycle lifecycle-web-components: lifecycle method should not be documented in public API\nclass AlertToast → method connectedCallback lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass AlertToast → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass AlertToast → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass AlertToast → field styles 📄 benchmark/components/avatar-image.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass AvatarImage → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass AvatarImage → method #onError implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass AvatarImage → static field styles 📄 benchmark/components/button-element.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ButtonElement → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ButtonElement → static field styles 📄 benchmark/components/clipboard-copy.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ClipboardCopy → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ClipboardCopy → static field styles 📄 benchmark/components/color-picker.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ColorPicker → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ColorPicker → method #onInput 📄 benchmark/components/complex-component.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ComplexComponent → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ComplexComponent → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass ComplexComponent → field styles 📄 benchmark/components/complex-types.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ComplexTypes → method render 📄 benchmark/components/dark-mode-toggle.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass DarkModeToggle → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass DarkModeToggle → method #toggle 📄 benchmark/components/dismiss-button.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass DismissButton → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass DismissButton → method #dismiss implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass DismissButton → static field styles 📄 benchmark/components/emoji-picker.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass EmojiPicker → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass EmojiPicker → static field styles 📄 benchmark/components/expand-toggle.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ExpandToggle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ExpandToggle → static field styles 📄 benchmark/components/expandable-panel.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ExpandablePanel → method render 📄 benchmark/components/field-label.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass FieldLabel → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass FieldLabel → static field styles 📄 benchmark/components/file-uploader.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass FileUploader → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass FileUploader → method #onChange 📄 benchmark/components/icon-badge.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass IconBadge → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass IconBadge → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass IconBadge → field styles 📄 benchmark/components/image-gallery.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ImageGallery → method render 📄 benchmark/components/inline-edit.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass InlineEdit → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #startEdit private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #onInput private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #onBlur implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass InlineEdit → static field styles 📄 benchmark/components/keyboard-shortcut.js lifecycle lifecycle-web-components: lifecycle method should not be documented in public API\nclass KeyboardShortcut → method connectedCallback lifecycle-web-components: lifecycle method should not be documented in public API\nclass KeyboardShortcut → method disconnectedCallback lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass KeyboardShortcut → method render 📄 benchmark/components/load-spinner.js lifecycle lifecycle-web-components: lifecycle method should not be documented in public API\nclass LoadSpinner → method connectedCallback lifecycle-web-components: lifecycle method should not be documented in public API\nclass LoadSpinner → method disconnectedCallback lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass LoadSpinner → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass LoadSpinner → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass LoadSpinner → field styles 📄 benchmark/components/markdown-viewer.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MarkdownViewer → method render 📄 benchmark/components/message-bubble.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MessageBubble → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass MessageBubble → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass MessageBubble → field styles 📄 benchmark/components/multi-slot.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MultiSlot → method render 📄 benchmark/components/no-decorator.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass NoDecoratorElement → method render 📄 benchmark/components/notification-banner.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass NotificationBanner → method render 📄 benchmark/components/privacy-test.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass PrivacyTest → method render private private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _handleClick private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _updateState implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass PrivacyTest → static field styles 📄 benchmark/components/progress-circle.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ProgressCircle → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ProgressCircle → method #color implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ProgressCircle → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass ProgressCircle → field styles 📄 benchmark/components/range-slider.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass RangeSlider → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass RangeSlider → method #onInput 📄 benchmark/components/resize-handle.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ResizeHandle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ResizeHandle → static field styles 📄 benchmark/components/search-bar.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SearchBar → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass SearchBar → method #onInput 📄 benchmark/components/section-header.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SectionHeader → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass SectionHeader → static field styles 📄 benchmark/components/skeleton-block.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SkeletonBlock → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass SkeletonBlock → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass SkeletonBlock → field styles 📄 benchmark/components/split-pane.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SplitPane → method render 📄 benchmark/components/star-rating.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass StarRating → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass StarRating → method #setRating 📄 benchmark/components/step-progress.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass StepProgress → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass StepProgress → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass StepProgress → field styles 📄 benchmark/components/tab-navigation.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TabNavigation → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass TabNavigation → method #select 📄 benchmark/components/tag-list.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TagList → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass TagList → static field styles 📄 benchmark/components/text-ticker.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TextTicker → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass TextTicker → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass TextTicker → field styles 📄 benchmark/components/theme-toggle.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ThemeToggle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ThemeToggle → static field styles 📄 benchmark/components/toast-stack.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ToastStack → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ToastStack → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass ToastStack → field styles 📄 benchmark/components/toggle-switch.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ToggleSwitch → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ToggleSwitch → method #onToggle 📄 benchmark/components/user-avatar.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass UserAvatar → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass UserAvatar → static field styles 📄 benchmark/components/user-list.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass UserList → method render 📄 benchmark/components/visually-hidden.js lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass VisuallyHidden → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass VisuallyHidden → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass VisuallyHidden → field styles @custom-elements-manifest/analyzer Docs 0.81s Avg Time 66.1KB Avg Output Size 100 Runs Warnings Validation Command npx --yes @custom-elements-manifest/analyzer analyze --outdir data/cea --globs benchmark/components/*.ts Run Breakdown: Time per Run (seconds) 0.79 0.80 0.81 0.82 0.83 0.84 1100Run # Validation Results 📄 Global schema schema-version-old: validation for manifests with schemaVersion \u003c 2.1.0 may not produce accurate results (version: 1.0.0) 📄 benchmark/components/alert-toast.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass AlertToast → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass AlertToast → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass AlertToast → field styles 📄 benchmark/components/avatar-image.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass AvatarImage → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass AvatarImage → method #onError implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass AvatarImage → static field styles 📄 benchmark/components/button-element.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ButtonElement → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ButtonElement → static field styles 📄 benchmark/components/clipboard-copy.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ClipboardCopy → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ClipboardCopy → static field styles 📄 benchmark/components/color-picker.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ColorPicker → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ColorPicker → method #onInput 📄 benchmark/components/complex-component.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ComplexComponent → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ComplexComponent → static field styles 📄 benchmark/components/complex-types.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ComplexTypes → method render 📄 benchmark/components/dark-mode-toggle.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass DarkModeToggle → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass DarkModeToggle → method #toggle 📄 benchmark/components/dismiss-button.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass DismissButton → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass DismissButton → method #dismiss implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass DismissButton → static field styles 📄 benchmark/components/emoji-picker.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass EmojiPicker → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass EmojiPicker → static field styles 📄 benchmark/components/expand-toggle.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ExpandToggle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ExpandToggle → static field styles 📄 benchmark/components/expandable-panel.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ExpandablePanel → method render 📄 benchmark/components/field-label.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass FieldLabel → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass FieldLabel → static field styles 📄 benchmark/components/file-uploader.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass FileUploader → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass FileUploader → method #onChange 📄 benchmark/components/icon-badge.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass IconBadge → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass IconBadge → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass IconBadge → field styles 📄 benchmark/components/image-gallery.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ImageGallery → method render 📄 benchmark/components/inline-edit.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass InlineEdit → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #startEdit private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #onInput private-hash-methods: ECMAScript private method should never be documented in public API\nclass InlineEdit → method #onBlur implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass InlineEdit → static field styles 📄 benchmark/components/keyboard-shortcut.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass KeyboardShortcut → method render 📄 benchmark/components/load-spinner.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass LoadSpinner → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass LoadSpinner → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass LoadSpinner → field styles 📄 benchmark/components/markdown-viewer.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MarkdownViewer → method render 📄 benchmark/components/message-bubble.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MessageBubble → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass MessageBubble → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass MessageBubble → field styles 📄 benchmark/components/multi-slot.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass MultiSlot → method render 📄 benchmark/components/no-decorator.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass NoDecoratorElement → method render 📄 benchmark/components/notification-banner.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass NotificationBanner → method render 📄 benchmark/components/privacy-test.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass PrivacyTest → method render private private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _handleClick private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _updateState implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass PrivacyTest → static field styles 📄 benchmark/components/progress-circle.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ProgressCircle → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ProgressCircle → method #color implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ProgressCircle → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass ProgressCircle → field styles 📄 benchmark/components/range-slider.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass RangeSlider → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass RangeSlider → method #onInput 📄 benchmark/components/resize-handle.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ResizeHandle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ResizeHandle → static field styles 📄 benchmark/components/search-bar.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SearchBar → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass SearchBar → method #onInput 📄 benchmark/components/section-header.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SectionHeader → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass SectionHeader → static field styles 📄 benchmark/components/skeleton-block.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SkeletonBlock → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass SkeletonBlock → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass SkeletonBlock → field styles 📄 benchmark/components/split-pane.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass SplitPane → method render 📄 benchmark/components/star-rating.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass StarRating → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass StarRating → method #setRating 📄 benchmark/components/step-progress.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass StepProgress → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass StepProgress → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass StepProgress → field styles 📄 benchmark/components/tab-navigation.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TabNavigation → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass TabNavigation → method #select 📄 benchmark/components/tag-list.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TagList → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass TagList → static field styles 📄 benchmark/components/text-ticker.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass TextTicker → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass TextTicker → static field styles 📄 benchmark/components/theme-toggle.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ThemeToggle → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ThemeToggle → static field styles 📄 benchmark/components/toast-stack.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ToastStack → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass ToastStack → static field styles verbose verbose-defaults: default value is very long, consider simplifying or moving to external configuration\nclass ToastStack → field styles 📄 benchmark/components/toggle-switch.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass ToggleSwitch → method render private private-hash-methods: ECMAScript private method should never be documented in public API\nclass ToggleSwitch → method #onToggle 📄 benchmark/components/user-avatar.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass UserAvatar → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass UserAvatar → static field styles 📄 benchmark/components/user-list.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass UserList → method render 📄 benchmark/components/visually-hidden.ts lifecycle lifecycle-lit-render: render method in Lit element should not be documented in public API\nclass VisuallyHidden → method render implementation implementation-static-styles: static styles field is implementation detail, should not be documented in public API\nclass VisuallyHidden → static field styles cem generate Docs 0.25s Avg Time 48KB Avg Output Size 100 Runs Warnings Validation Command cem generate -o data/cem/custom-elements.json benchmark/components/*.ts Run Breakdown: Time per Run (seconds) 0.24 0.25 0.25 0.25 0.26 0.26 1100Run # Validation Results 📄 benchmark/components/privacy-test.js private private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _handleClick private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _updateState private-underscore-methods: underscore-prefixed method should be marked as private or protected, or should not be documented in public API\nclass PrivacyTest → method _privateMethod ","link":"https://bennypowers.dev/cem/docs/benchmarks/","section":"docs","title":"Benchmarks"},{"body":"The cem command-line tool has several commands to help you generate and query Custom Elements Manifests.\nGenerate Analyze your source code and automatically create a comprehensive custom-elements.json manifest file that documents all your custom elements and their APIs.\nList Query and inspect your custom elements manifest with powerful filtering and display options to explore your component APIs interactively.\nSearch Find elements, attributes, methods, and other API features across your entire project using flexible keyword and regex pattern matching.\nValidate Ensure your custom elements manifest files conform to the official schema and catch potential issues before publishing.\n","link":"https://bennypowers.dev/cem/docs/commands/","section":"docs","title":"Commands"},{"body":"Contributing to cem Thank you for your interest in contributing to cem! This guide will help you set up your environment for development, building, and testing. Please read carefully and reach out if you have questions.\nGetting Started Fork and clone the repo: git clone https://github.com/bennypowers/cem.git cd cem Install Go (version 1.24 or newer recommended). Install Node.js (version 22 recommended) and npm . Building Native Build (Linux/macOS) To build the project for your local architecture:\nmake build The binary will be output to dist/cem.\nLocal Windows Build Using Podman You can cross-compile Windows binaries from any OS using Podman (or Docker). This will output cem-windows-x64.exe and cem-windows-arm64.exe in your project root.\nInstall Podman for your platform. Run: make windows This will build both Windows x64 and arm64 executables using the parameterized Containerfile. Tip:\nYou can build a specific Windows architecture:\nx64: make windows-x64 arm64: make windows-arm64 Note: These builds are cross-compiled and cannot be run directly on macOS or Linux. Test on a Windows machine or VM if needed.\nWorkspace Package The workspace package provides a consistent interface for working with local and remote packages. It abstracts away the details of whether files are on the local filesystem or need to be fetched from a remote source like the npm registry. This allows the list command to work with both local and remote packages seamlessly.\nTesting This project includes both unit tests and end-to-end (E2E) tests.\nRun unit tests: make test-unit Run E2E tests: make test-e2e Run all tests: make test Code Coverage To view the test coverage report, run:\nmake show-coverage This will open an HTML report in your browser.\nContinuous Integration (CI) All PRs are built and tested via GitHub Actions. The CI will cross-compile for Linux, macOS, and Windows (x64 and arm64), package npm binaries for each platform, and check that npm packaging works. You can see the exact build matrices in .github/workflows/release.yml and .github/workflows/test-build.yml. NPM Packaging The project produces platform-specific npm packages. Platform detection and binary installation are managed by scripts in the npm directory. You can test npm packaging locally with:\nnode scripts/gen-platform-package-jsons.js and validate the package with:\ncd platforms/cem-\u0026lt;platform\u0026gt;-\u0026lt;arch\u0026gt; npm pack --dry-run Multi-Platform Publishing for cem cem uses an esbuild-style optionalDependencies strategy for platform binaries.\nReleasing Tag your release (e.g., v1.2.3) in the main branch. The CI workflow will: Cross-compile and publish each @pwrs/cem-PLATFORM-ARCH package with the correct binary. Publish the main @pwrs/cem package with all subpackages as optionalDependencies. Local Testing Use npm install --ignore-scripts to test installation. The wrapper (bin/cem.js) will find and invoke the platform-specific binary. Requirements Node.js 22+ is required for all packages. All packages are ESM-only (\u0026quot;type\u0026quot;: \u0026quot;module\u0026quot;). Adding a New Platform Add a new entry in scripts/gen-platform-package-jsons.mjs and build logic. Update the main package\u0026rsquo;s optionalDependencies. How It Works The main package (@pwrs/cem) does not ship a binary. On install, npm will only pull in the appropriate platform package. The wrapper script detects your platform and runs the correct binary. Code Formatting \u0026amp; Linting Go: make format make lint Submitting Changes Open a pull request from your fork. Ensure all CI checks pass. Provide a clear description of your changes. Thank you for contributing!\nContributing to cem Thank you for your interest in contributing to cem! This guide will help you set up your environment for development, building, and testing. Please read carefully and reach out if you have questions.\nGetting Started Fork and clone the repo: git clone https://github.com/bennypowers/cem.git cd cem Install Go (version 1.24 or newer recommended). Install Node.js (version 22 recommended) and npm . Building Native Build (Linux/macOS) To build the project for your local architecture:\nmake build The binary will be output to dist/cem.\nLocal Windows Build Using Podman You can cross-compile Windows binaries from any OS using Podman (or Docker). This will output cem-windows-x64.exe and cem-windows-arm64.exe in your project root.\nInstall Podman for your platform. Run: make windows This will build both Windows x64 and arm64 executables using the parameterized Containerfile. Tip:\nYou can build a specific Windows architecture:\nx64: make windows-x64 arm64: make windows-arm64 Note: These builds are cross-compiled and cannot be run directly on macOS or Linux. Test on a Windows machine or VM if needed.\nWorkspace Package The workspace package provides a consistent interface for working with local and remote packages. It abstracts away the details of whether files are on the local filesystem or need to be fetched from a remote source like the npm registry. This allows the list command to work with both local and remote packages seamlessly.\nTesting This project includes both unit tests and end-to-end (E2E) tests.\nRun unit tests: make test-unit Run E2E tests: make test-e2e Run all tests: make test Code Coverage To view the test coverage report, run:\nmake show-coverage This will open an HTML report in your browser.\nContinuous Integration (CI) All PRs are built and tested via GitHub Actions. The CI will cross-compile for Linux, macOS, and Windows (x64 and arm64), package npm binaries for each platform, and check that npm packaging works. You can see the exact build matrices in .github/workflows/release.yml and .github/workflows/test-build.yml. NPM Packaging The project produces platform-specific npm packages. Platform detection and binary installation are managed by scripts in the npm directory. You can test npm packaging locally with:\nnode scripts/gen-platform-package-jsons.js and validate the package with:\ncd platforms/cem-\u0026lt;platform\u0026gt;-\u0026lt;arch\u0026gt; npm pack --dry-run Multi-Platform Publishing for cem cem uses an esbuild-style optionalDependencies strategy for platform binaries.\nReleasing Tag your release (e.g., v1.2.3) in the main branch. The CI workflow will: Cross-compile and publish each @pwrs/cem-PLATFORM-ARCH package with the correct binary. Publish the main @pwrs/cem package with all subpackages as optionalDependencies. Local Testing Use npm install --ignore-scripts to test installation. The wrapper (bin/cem.js) will find and invoke the platform-specific binary. Requirements Node.js 22+ is required for all packages. All packages are ESM-only (\u0026quot;type\u0026quot;: \u0026quot;module\u0026quot;). Adding a New Platform Add a new entry in scripts/gen-platform-package-jsons.mjs and build logic. Update the main package\u0026rsquo;s optionalDependencies. How It Works The main package (@pwrs/cem) does not ship a binary. On install, npm will only pull in the appropriate platform package. The wrapper script detects your platform and runs the correct binary. Code Formatting \u0026amp; Linting Go: make format make lint Submitting Changes Open a pull request from your fork. Ensure all CI checks pass. Provide a clear description of your changes. Thank you for contributing!\n","link":"https://bennypowers.dev/cem/docs/contributing/","section":"docs","title":"Contributing"},{"body":"","link":"https://bennypowers.dev/cem/categories/","section":"categories","title":"Categories"},{"body":"cem The blazing-fast CLI tool for generating and working with Custom Elements Manifests.\nnpm install --save-dev @pwrs/cem Get Started Read the Docs ","link":"https://bennypowers.dev/cem/","section":"","title":"cem"},{"body":"Welcome to the documentation for cem. Here you\u0026rsquo;ll find everything you need to get started with and master the tool.\nKey Sections Installation : Get cem up and running on your system. Commands : A detailed reference for every command. Benchmarks : Performance metrics for the analyzer. Contributing : Learn how you can help improve cem. ","link":"https://bennypowers.dev/cem/docs/","section":"docs","title":"Documentation"},{"body":" Generates CEM files from source code using syntax analysis powered by go and tree-sitter . Identifies custom elements, classes, variables, functions, and exports. Supports elements written in idiomatic style using Lit and TypeScript, with a @customElement decorator, and @property decorators on class fields. cem generate best supports LitElements written in idiomatic style with TypeScript decorators. There is rudimentary support for extends HTMLElement, but it is not a high priority for development. If you need something more specific open an issue . JSDoc Use JSDoc comments to add metadata to your element classes, similar to other tools. Add a description by separating the name of the item with -\n@attr / @attribute — Custom element attributes @csspart — CSS shadow parts. See Slots and Parts @cssprop / @cssproperty — Custom CSS properties @cssstate — Custom CSS states @demo — Demo URL @deprecated — Marks a feature or member as deprecated @event — Custom events dispatched by the element @slot — Named or default slots. See Slots and Parts @summary — Short summary for documentation See the generate test fixtures directory for examples\nSlots and Parts cem automatically detects \u0026lt;slot\u0026gt; elements and part attributes in your element’s render() template, merging them with any information provided via JSDoc. You can also document slots and parts inline in your template HTML using HTML comments. This helps in documenting them for your users, but is not required to detect them.\nIf the comment is a plain string, it will be used as the description for the element. In cases where an element is both a slot and a part, the description will only be applied to the slot. For more detailed documentation, you can use YAML inside the comment. Markdown is supported in all HTML comment documentation. Use a backslash (\\) to escape backticks. Examples Plain String Comment A simple comment will be treated as the description. Markdown content is supported and encouraged.\n\u0026lt;!-- This is the **default** `slot`. --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; YAML Comment For more complex metadata, use YAML syntax.\n\u0026lt;!-- summary: The main slot for content description: | This slot displays user-provided content. Supports multiline **markdown**. e.g. `code` deprecated: true --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; Documenting Slots and Parts together When an element is both a slot and a part, you can document both in a single comment.\n\u0026lt;!-- slot: summary: The `info` slot part: summary: The `info-part` part --\u0026gt; \u0026lt;slot name=\u0026#34;info\u0026#34; part=\u0026#34;info-part\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; When including inline markdown `code` in your comments in lit-html templates, you will need to escape the backticks in the comment. CSS Custom Properties Supports CSS Custom Properties by scanning css files and css tagged-template-literals. cem also discovers properties defined in :host rules.\nCustom properties beginning with _ will be ignored (treated as \u0026ldquo;private\u0026rdquo;) e.g. var(--_private) If you provide a Design Tokens Community Group format module (JSON) to cem via the --design-tokens flag, cem will add metadata from your design system to any matching css variables it finds in your elements You can use jsdoc-like comment syntax before each var call to document your variables Example :host { /** * A property defined on the host * @summary The host\u0026#39;s custom property */ --host-property: red; color: /** * custom color for use in this element * @summary color * @deprecated just use the `color` property */ var(--custom-color); border: 1px solid /** Border color of the element */ var(--border-color); } When you have a declaration where the LHS and RHS both contain CSS custom properties, you have to position your comments so that they target the correct variable:\nGood:\n/** comment for --a */ color: var(--a); /** comment for --b */ --b: blue; /** comment for --c */ --c: /** comment for --d */ var(--d); Bad:\n/** comment for --d */ --c: var(--d); Demos cem generate supports documenting your elements\u0026rsquo; demos by linking directly from JSDoc, or by configurable file-system based discovery.\nJSDoc @demo Tag Add demos directly to your element class or members with the @demo tag:\n/** * @demo https://example.com/my-element-plain/ * @demo https://example.com/my-element-fancy/ - A fancier demo with description */ @customElement(\u0026#39;my-element\u0026#39;) class MyElement extends LitElement { // ... } Demos defined this way will always appear in your manifest for the element.\nAutomatic Demo Discovery cem can automatically discover demos from your codebase based on your repository structure and configuration. Demos that are co-located with their component\u0026rsquo;s source module will be prioritized in the generated manifest.\nDemo Discovery The urlPattern uses the standard URLPattern syntax with named parameters (:paramName). You can use it to match file paths and extract parameters to build your demo URLs.\nFor example, if your demos are in subdirectories like src/my-element/demos/foo.html, you could use a pattern like this:\nsourceControlRootUrl: \u0026#34;https://github.com/your/repo/tree/main/\u0026#34; generate: demoDiscovery: fileGlob: \u0026#34;src/**/demos/*.html\u0026#34; urlPattern: \u0026#34;/src/:tag/demos/:demo.html\u0026#34; urlTemplate: \u0026#34;https://example.com/elements/{{.tag | alias}}/{{.demo | slug}}/\u0026#34; URL Template Functions The urlTemplate supports Go template syntax with built-in functions:\nalias - Apply element alias mapping slug - Convert to URL-friendly format lower - Convert to lowercase upper - Convert to uppercase Use pipeline syntax ({{.param | function}}) or function calls ({{function .param}}).\nDemo discovery options:\nOption Type Description fileGlob string Glob pattern for discovering demo files. sourceControlRootUrl string Canonical public source control URL for your repository root (on the main branch). urlPattern string URLPattern with named parameters (:param) for matching demo file paths. urlTemplate string Go template with functions for generating canonical demo URLs. Monorepos If you are planning to use cem in an npm or yarn monorepo, the best way for now is to create a new .config/cem.yaml file for each package you want to generate for, instead of using a top-level config file.\nExample Root package.json:\n{ \u0026#34;scripts\u0026#34;: { \u0026#34;generate\u0026#34;: \u0026#34;npm run generate --workspaces\u0026#34; }, \u0026#34;workspaces\u0026#34;: [ \u0026#34;./core\u0026#34;, \u0026#34;./elements\u0026#34; ] } core/.config/cem.yaml:\ngenerate: files: - \u0026#39;./**/*.ts\u0026#39; core/package.json\n{ \u0026#34;scripts\u0026#34;: { \u0026#34;generate\u0026#34;: \u0026#34;cem generate\u0026#34; } } elements/.config/cem.yaml:\ngenerate: files: - \u0026#39;./**/*.ts\u0026#39; elements/package.json\n{ \u0026#34;scripts\u0026#34;: { \u0026#34;generate\u0026#34;: \u0026#34;cem generate\u0026#34; } } Usage Generate a custom elements manifest from your files:\ncem generate \\ \u0026#34;src/**/*.ts\u0026#34; \\ --design-tokens npm:@my-ds/tokens/tokens.json \\ --exclude \u0026#34;src/**/*.test.ts\u0026#34; \\ --output custom-elements.json For npm projects you can use npx @pwrs/cem generate ....\nThe generate command does not support remote packages. To inspect a remote package\u0026rsquo;s manifest, use the cem list command. Arguments Argument Type Description \u0026lt;files or globs\u0026gt; positional (array) Files or glob patterns to include --package, -p string Path to a package directory. --output, -o string Write the manifest to this file instead of stdout --watch, -w bool Watch files for changes and regenerate automatically --exclude, -e array Files or glob patterns to exclude --no-default-excludes bool Do not exclude files by default (e.g., .d.ts files will be included unless excluded explicitly) --design-tokens string Path or npm specifier for DTCG-format design tokens --design-tokens-prefix string CSS custom property prefix for design tokens --demo-discovery-file-glob string Glob pattern for discovering demo files --demo-discovery-url-pattern string URLPattern with named parameters for matching demo file paths --demo-discovery-url-template string Go template with functions for generating canonical demo URLs --source-control-root-url string Glob pattern for discovering demo files --project-dir string Deprecated: Use --package instead. By default, some files (like .d.ts TypeScript declaration files) are excluded from the manifest. Use --no-default-excludes if you want to include all matching files and manage excludes yourself.\n","link":"https://bennypowers.dev/cem/docs/commands/generate/","section":"docs","title":"Generate"},{"body":"The cem list command provides a fast, flexible way to inspect your custom elements manifest.\nWithout any subcommands, cem list prints a table of all declarations in the manifest.\ncem list Flags Flag Description --package, -p Deno-style package specifier (e.g., npm:@scope/package@^1.2.3) or path to a package directory. --format Set the output format. Can be table or tree. Default: table. --deprecated Only show deprecated items. Example:\ncem list --deprecated --format tree cem list --package npm:@vaadin/button@24.3.5 Subcommands tags Lists all custom element tag names in the project.\nFlags:\nFlag Description --columns, -c Specify which columns to include. Available Columns: Name, Class, Module, Summary\nExample:\ncem list tags -c Class -c Module modules Lists all module paths in the project.\nFlags:\nFlag Description --columns, -c Specify which columns to include. Available Columns: Name, Path\nExample:\ncem list modules attributes (aliases: attrs) Lists all attributes for a given custom element.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, DOM Property, Reflects, Summary\nExample:\ncem list attributes -t my-element -c \u0026#34;DOM Property\u0026#34; slots Lists all named and default slots for a tag.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Summary\nExample:\ncem list slots -t my-element events Lists all custom events fired by a tag.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Type, Summary\nExample:\ncem list events -t my-element css-properties (aliases: css-props) Lists CSS custom properties for a tag.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Syntax, Default, Summary\nExample:\ncem list css-properties -t my-element css-states Lists CSS custom states for a tag.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Summary\nExample:\ncem list css-states -t my-element css-parts Lists CSS shadow parts for a tag.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Summary\nExample:\ncem list css-parts -t my-element methods Lists methods for a tag\u0026rsquo;s class.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: Name, Return, Privacy, Summary\nExample:\ncem list methods -t my-element demos Lists all demos for a given custom element.\nFlags:\nFlag Description --tag-name, -t (Required) The tag name of the element to inspect. --columns, -c Specify which columns to include. Available Columns: URL, Description\nExample:\ncem list demos -t my-element ","link":"https://bennypowers.dev/cem/docs/commands/list/","section":"docs","title":"List"},{"body":"The cem search command lets you search through the custom elements manifest for any element matching the given pattern.\nUsage cem search [pattern] [flags] Description The search command allows you to find any element in your custom elements manifest by searching through names, descriptions, summaries, and labels. This includes:\nCustom element tags Modules and files Attributes Slots CSS properties, parts, and states Events Methods and fields Functions and variables Demos The search pattern is treated as a regular expression by default, allowing for powerful and flexible searches. If the regex is invalid, it automatically falls back to literal string matching.\nAll searches are case-insensitive.\nOptions -f, --format string - Output format: table (default) or tree Examples Basic Search Search for anything containing \u0026ldquo;button\u0026rdquo;:\ncem search button Regular Expression Search Find elements starting with \u0026ldquo;my-\u0026rdquo; and ending with \u0026ldquo;button\u0026rdquo;:\ncem search \u0026#34;^my-.*button$\u0026#34; Find elements containing \u0026ldquo;click\u0026rdquo; OR \u0026ldquo;hover\u0026rdquo;:\ncem search \u0026#34;click|hover\u0026#34; Format Options Display results as a tree:\ncem search button --format tree Display results as a table (default):\ncem search button --format table Specific Content Types Find CSS-related properties:\ncem search \u0026#34;css.*property\u0026#34; Find header-related slots:\ncem search \u0026#34;slot.*header\u0026#34; Find deprecated items:\ncem search deprecated --format tree Output Formats Table Format (Default) The table format shows detailed information organized by sections:\n# \u0026lt;root\u0026gt; # module rh-button/rh-button.js # `\u0026lt;rh-button\u0026gt;` Triggers actions on the page or in the background ## Demos URL | Source -----------------------------------------------|-------- `https://ux.redhat.com/elements/button/demo/` | https://... ## CSS Parts Name -------- `button` Tree Format The tree format shows a hierarchical view of matching elements:\nSearch Results for: button \u0026lt;root\u0026gt; ├─┬ module rh-button/rh-button.js │ └─┬ \u0026lt;rh-button\u0026gt; │ └─┬ Parts │ └── button Regular Expression Features Since patterns are treated as regular expressions, you can use:\n^ - Start of string anchor $ - End of string anchor .* - Match any characters | - OR operator [abc] - Character class \\d, \\w, \\s - Character shortcuts If your regex is invalid, the search automatically falls back to literal string matching.\nGlobal Options The search command also supports all global cem options:\n-p, --package string - Package specifier or path --config string - Config file path -v, --verbose - Verbose output See Also cem list - List specific types of elements from the manifest cem validate - Validate manifest files cem generate - Generate manifest files ","link":"https://bennypowers.dev/cem/docs/commands/search/","section":"docs","title":"Search"},{"body":"","link":"https://bennypowers.dev/cem/tags/","section":"tags","title":"Tags"},{"body":"The cem validate command validates your custom-elements.json file against its corresponding JSON schema and provides intelligent warnings for potentially inappropriate manifest content.\ncem validate [path/to/custom-elements.json] By default, cem validate will look for a custom-elements.json file in the current directory. You can also provide a path to a different file.\nOptions --verbose, -v: Show detailed information including schema version --disable: Disable specific warning rules or categories (can be used multiple times) --format: Output format, either text (default) or json How it Works The validate command reads the schemaVersion field from your manifest and fetches the corresponding schema from https://unpkg.com/custom-elements-manifest@\u0026lt;version\u0026gt;/schema.json. Schemas are cached locally for performance.\nSchema Validation If the manifest is valid against the JSON schema, the command will exit with a 0 status code and print a success message. If the manifest is invalid, it will print detailed validation errors with contextual information and exit with a non-zero status code.\nIntelligent Warnings Beyond basic schema validation, cem validate analyzes your manifest for patterns that are technically valid but may indicate issues with your API documentation:\nLifecycle Methods Web Components lifecycle: connectedCallback, disconnectedCallback, attributeChangedCallback, adoptedCallback Lit Element lifecycle: firstUpdated, updated, willUpdate, getUpdateComplete, performUpdate, scheduleUpdate, requestUpdate, createRenderRoot Lit Element render method: render (only in Lit elements) Form-associated callbacks: formAssociatedCallback, formDisabledCallback, formResetCallback, formStateRestoreCallback Private Methods and Implementation Details Private methods: Methods starting with _ or # Static implementation fields: styles, shadowRootOptions, formAssociated, observedAttributes Internal utility methods: init, destroy, dispose, cleanup, debug, log Superclass Attribution Built-in types: Warns when built-in types like HTMLElement don\u0026rsquo;t have \u0026quot;module\u0026quot;: \u0026quot;global:\u0026quot; Verbose Content Large CSS defaults: CSS properties with very long default values Output Formats Text Format (Default) The default text format provides human-readable output with colors and formatting.\nJSON Format Use --format json to get machine-readable output suitable for CI/CD pipelines and tooling:\ncem validate --format json custom-elements.json JSON output structure:\n{ \u0026#34;valid\u0026#34;: true, \u0026#34;path\u0026#34;: \u0026#34;custom-elements.json\u0026#34;, \u0026#34;schemaVersion\u0026#34;: \u0026#34;2.1.1\u0026#34;, \u0026#34;errors\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;schema-required-property\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;my-element.js\u0026#34;, \u0026#34;declaration\u0026#34;: \u0026#34;class MyElement\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;required property \u0026#39;name\u0026#39; is missing\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;/modules/0/declarations/0\u0026#34; } ], \u0026#34;warnings\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;lifecycle-lit-render\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;my-element.js\u0026#34;, \u0026#34;declaration\u0026#34;: \u0026#34;class MyElement\u0026#34;, \u0026#34;member\u0026#34;: \u0026#34;method render\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;render method in Lit element should not be documented in public API\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;lifecycle\u0026#34; } ] } Configuration You can disable specific warning rules using configuration or command-line flags:\nConfiguration File # .cem.yaml warnings: disable: # Disable entire categories - lifecycle - private - implementation # Or disable specific rules - lifecycle-lit-render - implementation-static-styles - private-underscore-methods Command Line # Disable entire categories cem validate --disable lifecycle --disable private # Disable specific rules cem validate --disable lifecycle-lit-render --disable implementation-static-styles # Combine with JSON output cem validate --format json --disable lifecycle The --disable flag can be used multiple times and will be merged with any disabled rules from your configuration file.\nAvailable Warning Categories lifecycle - All lifecycle method warnings private - Private method warnings (underscore and hash prefixed) implementation - Implementation detail warnings (static fields) superclass - Superclass attribution warnings verbose - Verbose content warnings internal - Internal utility method warnings Specific Warning Rule IDs Lifecycle Rules lifecycle-web-components - Web Components lifecycle methods lifecycle-lit-methods - Lit Element lifecycle methods lifecycle-lit-render - Lit Element render method lifecycle-constructor - Constructor method lifecycle-form-callbacks - Form-associated element callbacks Private Method Rules private-underscore-methods - Methods starting with _ private-hash-methods - Methods starting with # Implementation Detail Rules implementation-static-styles - Static styles field implementation-shadow-root-options - shadowRootOptions field implementation-form-associated - formAssociated field implementation-observed-attributes - observedAttributes field Other Rules superclass-builtin-modules - Built-in superclass module attribution verbose-css-defaults - Large CSS property defaults internal-utility-methods - Internal utility methods Schema Validation Error IDs Schema validation errors also include unique IDs for programmatic handling:\nschema-required-property - Missing required property schema-additional-properties - Unexpected additional property schema-invalid-enum - Invalid enum value schema-invalid-kind - Invalid declaration kind schema-invalid-type - Wrong data type schema-invalid-format - Invalid format (e.g., URI, email) schema-invalid-pattern - String doesn\u0026rsquo;t match required pattern schema-value-too-small - Number below minimum schema-value-too-large - Number above maximum schema-string-too-short - String shorter than minLength schema-string-too-long - String longer than maxLength schema-array-too-short - Array shorter than minItems schema-array-too-long - Array longer than maxItems schema-duplicate-items - Array contains duplicate items schema-validation-error - Generic validation error ","link":"https://bennypowers.dev/cem/docs/commands/validate/","section":"docs","title":"Validate"}]